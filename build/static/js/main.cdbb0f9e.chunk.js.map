{"version":3,"sources":["components/Tab/Tab.js","components/LeadCards/LeadCard.js","components/LeadCards/LeadCards.js","store/actions/actionTypes.js","axios-common.js","store/actions/leads.js","containers/LeadMaster/index.js","App.js","reportWebVitals.js","store/utility.js","store/reducers/leads.js","store/reducers/index.js","index.js"],"names":["TabPane","Tabs","Tab","props","card1","className","card2","card3","defaultActiveKey","tabBarGutter","type","centered","tab","LeadCard","React","memo","lead_Id","leadStatus","firstName","lastName","created_date","allocatedDate","primaryMobile","allocatedBy","allocatedTo","avatar","match","useState","window","innerWidth","width","setWidth","useEffect","handleWindowResize","addEventListener","removeEventListener","card","hoverable","size","xl","Grid","Date","toLocaleDateString","xs","md","style","backgroundColor","MoreOutlined","fontSize","marginLeft","color","LeadCards","leads","_","isEmpty","console","log","map","lead","index","Fragment","lead_allocated_by","first_name","last_name","_id","FETCH_ALL_LEADS_START","FETCH_ALL_LEADS_SUCCESS","FETCH_ALL_LEADS_FAIL","instance","axios","create","baseURL","headers","fetchAllLeads","pageNo","skipVal","dispatch","actionTypes","get","then","res","allLeads","data","errMsg","page","catch","error","fetchAllLeadsFail","response","errors","LeadMaster","current","setcurrent","useDispatch","actions","leadsData","useSelector","state","class","onChange","total","defaultPageSize","itemRender","cur","originalElement","onClick","App","path","component","cards","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","updateObject","oldObject","updatedProperties","initialState","allLeads_Loading","fetch_allLeads_Loading","selected_allLeads","fetch_allLeads_Error","fetchAllLeadsStart","action","fetchAllLeadsSuccess","selected_all_leads","reducer","rootReducer","combineReducers","leadsReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootreducer","applyMiddleware","thunk","ReactDOM","render","id","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdbb0f9e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Tabs,Card} from 'antd'\r\nimport './Tab.css'\r\nconst {TabPane} = Tabs\r\n\r\nconst  Tab = (props)=> {\r\n    let card1 = <Card className=\"tab-pane\">All leads</Card>\r\n    let card2 = <Card className=\"tab-pane\">Open</Card>\r\n    let card3 = <Card className=\"tab-pane\">Failed</Card>\r\n    return (\r\n        <div className=\"tab-container\">\r\n            <Tabs defaultActiveKey=\"1\" tabBarGutter={0} type=\"card\" centered={true}>\r\n                <TabPane tab={card1} key=\"1\">\r\n                </TabPane>\r\n                <TabPane tab={card2} key=\"2\">\r\n                </TabPane>\r\n                <TabPane tab={card3} key=\"3\">\r\n                </TabPane>\r\n            </Tabs>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tab\r\n\r\n// function callback(key) {\r\n//     console.log(key);\r\n//   }\r\n// const renderTabBar = (props, DefaultTabBar) => (\r\n//     // <Sticky bottomOffset={80}>\r\n//     //   {({ style }) => (\r\n//         <DefaultTabBar {...props} className=\"site-custom-tab-bar\"  />\r\n//     //   )}\r\n//     // </Sticky>\r\n//   );","import React,{useEffect,useState} from 'react'\r\nimport {Card,Avatar} from 'antd'\r\nimport {MoreOutlined } from '@ant-design/icons';\r\nimport './LeadCard.css';\r\nconst LeadCard = React.memo((props) => {\r\n\r\n    const {lead_Id,leadStatus,firstName,lastName,created_date,allocatedDate,primaryMobile,allocatedBy,allocatedTo} = props\r\n\r\n    let avatar = firstName.match(/\\b(\\w)/g) + lastName.match(/\\b(\\w)/g)\r\n\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const breakpoint = 620;\r\n\r\n     useEffect(() => {\r\n        const handleWindowResize = () => setWidth(window.innerWidth)\r\n        window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n        // Return a function from the effect that removes the event listener\r\n        return () => window.removeEventListener(\"resize\", handleWindowResize);\r\n    }, []);\r\n\r\n    // Card for desktop\r\n    let card = \r\n            <Card\r\n                className=\"lead-card-desktop\"\r\n                hoverable={true}>\r\n                    <div className=\"avatar-and-status\">\r\n                        <Avatar size={{xl: 50}}>{avatar}</Avatar>\r\n                        <p className=\"user-status-text capitalize\">{leadStatus}</p>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <div className=\"content-header\">\r\n                            <p className=\"user-name-text capitalize\">\r\n                                {firstName} {lastName}\r\n                                <span className=\"user-id uppercase\">\r\n                                    {lead_Id}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"content-body\">\r\n                            <Card.Grid hoverable={false} className=\"grid-style\">\r\n                                <p className=\"text-type\">Created on</p>\r\n                                <p className=\"text-content\">{new Date(created_date).toLocaleDateString('in')}</p>\r\n                            </Card.Grid>\r\n                            <Card.Grid hoverable={false} className=\"grid-style\">\r\n                                <p className=\"text-type\">Created on</p>\r\n                                <p className=\"text-content\">{new Date(allocatedDate).toLocaleDateString('in')}</p>\r\n                            </Card.Grid>\r\n                            <Card.Grid  hoverable={false} className=\"grid-style\">\r\n                                <p className=\"text-type\">Appointment on</p>\r\n                                <p className=\"text-content\">-</p>\r\n                            </Card.Grid>\r\n                            <Card.Grid  hoverable={false} className=\"grid-style\">\r\n                                <p className=\"text-type\">Mobile No.</p>\r\n                                <p className=\"text-content\">{primaryMobile}</p>\r\n                            </Card.Grid>\r\n                            <Card.Grid  hoverable={false} className=\"grid-style\">\r\n                                <p className=\"text-type\">Allocated by</p>\r\n                                <p className=\"text-content capitalize\">{allocatedBy}</p>\r\n                            </Card.Grid>\r\n                            <Card.Grid  hoverable={false} className=\"grid-style\">\r\n                                    <p className=\"text-type\">Allocated to</p>\r\n                                    <p className=\"text-content capitalize\">{allocatedTo}</p>\r\n                            </Card.Grid>\r\n                        </div>\r\n                    </div>\r\n                    <button className=\"update-btn\">Update</button>  \r\n            </Card>\r\n\r\n    //Card for Mobile\r\n    if(width<breakpoint){\r\n        card = \r\n        <Card\r\n            className=\"lead-card-mobile\"\r\n            hoverable>\r\n            <Avatar size={{\r\n                    xs: 36,\r\n                    md: 40,\r\n                    xl: 50,\r\n                    }}\r\n                    style={{backgroundColor:'blue'}}>{avatar}</Avatar>\r\n            <div className=\"card-content-text capitalize\">\r\n                <p className=\"user-name-text\">{firstName} {lastName}</p>\r\n                <p className=\"user-status-text\">{leadStatus}</p>\r\n            </div>\r\n            <MoreOutlined  style={{fontSize:'25px',marginLeft:'auto',color:'grey'}}/>\r\n        </Card>\r\n    }\r\n    return (\r\n            <div>{card}</div>\r\n\r\n    )\r\n})\r\n\r\nexport default LeadCard\r\n","import React from 'react'\r\nimport LeadCard from './LeadCard'\r\nimport './LeadCards.css'\r\nimport _ from \"lodash\";\r\n\r\nconst LeadCards = (props)=> {\r\n    let card = [];\r\n    if(props.leads && !_.isEmpty(props.leads)){\r\n        console.log(props.leads)\r\n        card = _.map(props.leads, (lead, index) => {\r\n       return ( <React.Fragment>\r\n            <LeadCard \r\n                key={lead._id}\r\n                lead_Id={lead.lead_Id}\r\n                leadStatus={lead.leadStatus}\r\n                firstName={lead.firstName}\r\n                lastName={lead.lastName}\r\n                created_date={lead.created_date}\r\n                allocatedDate={lead.allocatedDate}\r\n                primaryMobile={lead.primaryMobile}\r\n                allocatedBy={lead.lead_allocated_by.first_name +' '+ lead.lead_allocated_by.last_name}\r\n                allocatedTo={lead.lead_allocated_by.first_name +' '+ lead.lead_allocated_by.last_name}\r\n            />\r\n        </React.Fragment>\r\n       )\r\n        })\r\n    }\r\n    return (\r\n            <div className=\"cards-container\">\r\n              {card}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default LeadCards\r\n","export const FETCH_ALL_LEADS_START =  'FETCH_ALL_LEADS_START'\r\nexport const FETCH_ALL_LEADS_SUCCESS =  'FETCH_ALL_LEADS_SUCCESS'\r\nexport const FETCH_ALL_LEADS_FAIL =  'FETCH_ALL_LEADS_FAIL'\r\n\r\nexport const FETCH_TODAY_LEADS_START =  'FETCH_TODAY_LEADS_START'\r\nexport const FETCH_TODAY_LEADS_SUCCESS =  'FETCH_TODAY_LEADS_SUCCESS'\r\nexport const FETCH_TODAY_LEADS_FAIL =  'FETCH_TODAY_LEADS_FAIL'\r\n\r\nexport const FETCH_OPEN_LEADS_START =  'FETCH_OPEN_LEADS_START'\r\nexport const FETCH_OPEN_LEADS_SUCCESS =  'FETCH_OPEN_LEADS_SUCCESS'\r\nexport const FETCH_OPEN_LEADS_FAIL =  'FETCH_OPEN_LEADS_FAIL'\r\n\r\nexport const FETCH_CONVERTED_LEADS_START =  'FETCH_CONVERTED_LEADS_START'\r\nexport const FETCH_CONVERTED_LEADS_SUCCESS =  'FETCH_CONVERTED_LEADS_SUCCESS'\r\nexport const FETCH_CONVERTED_LEADS_FAIL =  'FETCH_CONVERTED_LEADS_FAIL'\r\n\r\nexport const FETCH_FAILED_LEADS_START =  'FETCH_FAILED_LEADS_START'\r\nexport const FETCH_FAILED_LEADS_SUCCESS =  'FETCH_FAILED_LEADS_SUCCESS'\r\nexport const FETCH_FAILED_LEADS_FAIL =  'FETCH_FAILED_LEADS_FAIL'\r\n\r\nexport const FETCH_LEAD_CATEGORY_START = 'FETCH_LEAD_CATEGORY_START'\r\nexport const FETCH_LEAD_CATEGORY_SUCCESS = 'FETCH_LEAD_CATEGORY_SUCCESS'\r\nexport const FETCH_LEAD_CATEGORY_FAIL = 'FETCH_LEAD_CATEGORY_FAIL'","import axios from 'axios'; \r\nexport const baseURL = 'https://sdrestnode.iorta.in/secure/sd/user/v2/';\r\n\r\nlet defaultHeaders = {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json' ,\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: baseURL,\r\n    headers: defaultHeaders\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-common';\r\n\r\n\r\n\r\nexport const fetchAllLeadsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_LEADS_START\r\n    }\r\n}\r\n\r\nexport const fetchAllLeadsSuccess = (allLeads,page) => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_LEADS_SUCCESS,\r\n        allLeads: allLeads,\r\n        page:page\r\n    }\r\n} \r\n\r\n\r\nexport const fetchAllLeadsFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ALL_LEADS_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const fetchAllLeads = (leads,pageNo) => {\r\n        console.log(pageNo)\r\n        let skipVal \r\n        if(pageNo===1){\r\n            skipVal = 0\r\n            console.log(skipVal)\r\n        }else{\r\n            skipVal = (pageNo-1)*15\r\n            console.log(skipVal)\r\n\r\n        }\r\n    return dispatch => {\r\n        dispatch(fetchAllLeadsStart())\r\n        return axios.get(`getLead/5df782ab2b5ffa6c72ae1a25?leadfilter=all&skip=${skipVal}`)\r\n            .then(res => {\r\n                \r\n                return dispatch(fetchAllLeadsSuccess(res.data.errMsg[0],res.data.errMsg[1]))\r\n            })\r\n            .catch(error => {\r\n                return dispatch(fetchAllLeadsFail(error.response.data.errors))\r\n            })\r\n    }\r\n}","import React,{useEffect,useState} from 'react'\r\nimport Tab from '../../components/Tab/Tab'\r\nimport LeadCards from '../../components/LeadCards/LeadCards'\r\nimport { Pagination } from 'antd';\r\nimport * as actions from '../../store/actions/index';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport './index.css'\r\nconst LeadMaster = (props) => {\r\n    //Set current page no of the page\r\n    const [current,setcurrent] = useState(1)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(actions.fetchAllLeads('',current))\r\n    },[dispatch,current]);\r\n\r\n    //Accessing LeadCard data  from store\r\n    const leadsData = useSelector((state)=>state.leads.allLeads)\r\n\r\n    //Pagination numbers function\r\n    function itemRender(cur, type, originalElement) {\r\n        const onNext = ()=>{\r\n\r\n            setcurrent(current+1)\r\n            // console.log(current)\r\n\r\n        }\r\n        \r\n        if (type === 'next') {\r\n          return <button current={current} onClick={onNext}>Next</button>;\r\n        }\r\n        \r\n        return originalElement;\r\n    }\r\n\r\n    const handlePageClick = (page)=>{\r\n        setcurrent(page)\r\n        // console.log(page)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Tab/>\r\n            <LeadCards leads={leadsData}/>\r\n            <div class=\"page-holder\">\r\n                <Pagination\r\n                    current={current}\r\n                    onChange={handlePageClick}\r\n                    total={50}\r\n                    defaultPageSize={15}\r\n                    itemRender={itemRender} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LeadMaster;\r\n","import './App.css';\r\nimport LeadMaster from './containers/LeadMaster/index'\r\nimport cards from './components/LeadCards/LeadCards';\r\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"box-size\">\r\n        <Switch>\r\n          <Route path=\"/all_leads\" component={cards}></Route>\r\n          <Route path=\"/leadMaster\" component={LeadMaster}></Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n}","import * as actionTypes from '../actions/actionTypes'\r\nimport { updateObject } from '../utility';\r\n\r\nconst initialState = {\r\n    allLeads:[],\r\n    allLeads_Loading : false,\r\n    fetch_allLeads_Loading : false,\r\n    selected_allLeads : null,\r\n    fetch_allLeads_Error : \"\",\r\n\r\n}\r\n\r\nconst fetchAllLeadsStart = (state, action) => {\r\n    return updateObject(state, { fetch_allLeads_Loading: true })\r\n}\r\n\r\nconst fetchAllLeadsSuccess = (state, action) => {\r\n    return updateObject(state, { fetch_allLeads_Loading: false, allLeads: action.allLeads, selected_all_leads: action.selected_allLeads })\r\n}\r\nconst fetchAllLeadsFail = (state, action) => {\r\n    return updateObject(state, { fetch_allLeads_Loading: false, fetch_allLeads_Error: action.error });\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        \r\n        case actionTypes.FETCH_ALL_LEADS_START: return fetchAllLeadsStart(state, action)\r\n        case actionTypes.FETCH_ALL_LEADS_SUCCESS: return fetchAllLeadsSuccess(state, action)\r\n        case actionTypes.FETCH_ALL_LEADS_FAIL: return fetchAllLeadsFail(state, action)\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers } from 'redux';\r\nimport leadsReducer from './leads';\r\n\r\nconst rootReducer = combineReducers({\r\n    leads:leadsReducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport rootreducer from './store/reducers/index';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware,compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootreducer,composeEnhancers(\r\n  applyMiddleware(thunk)\r\n));\r\n\r\nReactDOM.render(\r\n  <Provider store={store} id=\"root\">\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>\r\n  ,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}